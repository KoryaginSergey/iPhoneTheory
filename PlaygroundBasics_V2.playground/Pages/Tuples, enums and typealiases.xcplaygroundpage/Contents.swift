import Foundation
/*:
# –ö–æ—Ä—Ç–µ–∂–∏, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã —Ç–∏–ø–æ–≤

–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã —É–∑–Ω–∞–µ—à—å:
- —á—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è (`enum`)
- –∫–∞–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏—é –ø–æ –∫–µ–π—Å–∞–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
- —á—Ç–æ —Ç–∞–∫–æ–µ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
- —á—Ç–æ —Ç–∞–∫–æ–µ –∫–æ—Ä—Ç–µ–∂–∏  (`tuple`)
- —á—Ç–æ —Ç–∞–∫–æ–µ –ø–≤—Å–µ–≤–¥–æ–Ω–∏–º—ã —Ç–∏–ø–∞ (`typealias`)

–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏:
- [–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è](https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html)
- [–ö–æ—Ä—Ç–µ–∂–∏](https://medium.com/swift-programming/swift-tuple-328aecff50e7)
- [–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã —Ç–∏–ø–æ–≤](https://www.avanderlee.com/swift/typealias-usage-swift/)

–ó–∞–∫—Ä–µ–ø–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:

#### –ó–∞–¥–∞–Ω–∏–µ 1
 
 - –°–æ–∑–¥–∞–∏ÃÜ –∫–æ—Ä—Ç–µ–∂ —Å —Ç—Ä–µ–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: —Ç–≤–æ–π –ª—é–±–∏–º—ã–∏ÃÜ —Ñ–∏–ª—å–º, –ª—é–±–∏–º—ã–π  –≥–æ—Ä–æ–¥ –∏ –ª—é–±–∏–º–æ–µ –±–ª—é–¥–æ. –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–º–µ–Ω–æ–≤–∞–Ω—ã.
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –≥–æ—Ä–æ–¥ (–¥–∞–Ω–Ω—ã–µ –≤–æ–∑—å–º–∏ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞).
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
let myFavorite : (film: String, city: String, dish: String) = ("Matrix", "Kharkov", "Pasta")

print("My favorite city - \(myFavorite.city)")
/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 2

- –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é _minMax_, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ –Ω–∏—Ö –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–∞.
- –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.
 - Example: üòâ\
 _Function Call:_\
 minmax([2, 3, 10, 1])\
 _Output:_\
 (1, 10)
*/

// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
func minMax(arrayInt: [Int]) -> (Int?, Int?) {
    return (arrayInt.min(), arrayInt.max())
}
print(minMax(arrayInt: [2, 3, 10, 1]))
/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 3
 
 - –û–±—å—è–≤–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ (`enum`) _Season_, –æ–ø–∏—Å—ã–≤–∞—é—â–µ–µ –≤—Ä–µ–º–µ–Ω–∞ –≥–æ–¥–∞ –∏ —Å–æ—Å—Ç–æ—è—é—â–µ–µ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: _winter_, _spring_, _summer_, _autumn_.

 - –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è.
 - Example: üòâ\
 _Output:_\
 Seasons:\
 winter\
 spring\
 summer\
 autumn
 */

// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
enum Season: CaseIterable {
    case winter
    case spring
    case summer
    case autumn
}
print("Seasons:")
for season in Season.allCases {
    print(season)
}

/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 4
 
 - –û–±—å—è–≤–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ (`enum`) _CoinType_, –æ–ø–∏—Å—ã–≤–∞—é—â–µ–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç.
 - Note: üëÜ _–í –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑—å–º–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\
 penny = 1\
 nickle = 5\
 dime = 10\
 quarter = 25_
 */
/*:
 - –û–±—å—è–≤–∏ –º–∞—Å—Å–∏–≤ _money_, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è –∫–æ—Ä—Ç–µ–∂–∏ _(amount, type)_. –ü—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π –º–∞—Å—Å–∏–≤ –ª—é–±—ã–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –µ–≥–æ —Ç–∏–ø—É –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
*/
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
enum CoinType: Int {
    case penny = 1
    case nickle = 5
    case dime = 10
    case quarter = 25
}
var money: [(amount: Int, type: CoinType)] = [(10, .penny),(15,.nickle),(3,.quarter),(20,.penny),(3,.dime),(7,.quarter)]
/*:
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω–µ—Ç.
 - Example: üòâ\
 _Input:_\
 var moneyArray : [(Int,CoinType)] = [(10, .penny),(15,.nickle),(3,.quarter),(20,.penny),(3,.dime),(7,.quarter)]\
 _Output:_\
 All: 385
*/
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
var sumAll = 0
for (amount, type) in money {
    sumAll += type.rawValue * amount
}
print("All: \(sumAll)")
/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 5
 
 - –û–±—ä—è–≤–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º (`typealias`) —Ç–∏–ø–∞ `String` —Å –∏–º–µ–Ω–µ–º _Text_.
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
typealias Text = String
/*:
 - –û–±—ä—è–≤–∏ —Ç—Ä–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–∏–ø–∞ `Text`. –ó–Ω–∞—á–µ–Ω–∏—è –¥–≤—É—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–æ–ª–∂–Ω—ã —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä, —Ç—Ä–µ—Ç—å–µ–∏ÃÜ ‚Äî –∏–∑ —Ü–∏—Ñ—Ä –∏ –±—É–∫–≤.
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
let firstValue: Text = "123"
let secondValue: Text = "234"
let thirdValue: Text = "Hello9"
/*:
 - –ò–∑ –≤—Å–µ—Ö —Ç—Ä–µ—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç –Ω–∞–∏ÃÜ–¥–∏ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Å—Ç–æ—è—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä, –∏ –≤—ã–≤–µ–¥–∏ –∏—Ö –≤ –∫–æ–Ω—Å–æ–ª—å.
*/
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
if let firstInt = Int(firstValue) {
    print(firstInt)
}
if let secondInt = Int(secondValue) {
    print(secondInt)
}
if let thirdInt = Int(thirdValue) {
    print(thirdInt)
}
/*:
 - –°–æ–∑–¥–∞–∏ÃÜ –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è —Ç–∏–ø–∞ `(numberOne: Text?, numberTwo: Text?)?` —Å –∏–º–µ–Ω–µ–º _TupleType_.
  - Note: üëÜ _–û–±—Ä–∞—Ç–∏ –≤–Ω–º–∏–∞–Ω–∏–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–∏ÃÜ —Ç–∏–ø —è–≤–ª—è–µ—Ç—Å—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ —Ç–∞–∫–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è_
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
typealias TupleType = (numberOne: Text?, numberTwo: Text?)?
/*:
 - –°–æ–∑–¥–∞–∏ÃÜ —Ç—Ä–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∏–ø–∞ `TupleType`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: _(‚Äú190‚Äù, ‚Äú67‚Äù)_, _(‚Äú100‚Äù, nil)_, _(‚Äú-65‚Äù, ‚Äú70‚Äù)_.
 - –í—ã–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–µ—Ö –∫–æ—Ä—Ç–µ–∂–µ–∏ÃÜ, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∏ –æ–¥–∏–Ω –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ `nil`.
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
var firstTuple: TupleType = TupleType((numberOne: "190", numberTwo: "67"))
var secondTuple: TupleType = TupleType((numberOne: "100", numberTwo: nil))
var thirdTuple: TupleType = TupleType((numberOne: "-65", numberTwo: "70"))

if let numberOne = firstTuple?.numberOne, let numberTwo = firstTuple?.numberTwo {
    print("First element = \(numberOne), second element = \(numberTwo)")
}
if let numberOne = secondTuple?.numberOne, let numberTwo = secondTuple?.numberTwo {
    print("First element = \(numberOne), second element = \(numberTwo)")
}
if let numberOne = thirdTuple?.numberOne, let numberTwo = thirdTuple?.numberTwo {
    print("First element = \(numberOne), second element = \(numberTwo)")
}

//: [–ù–∞–∑–∞–¥: –ó–∞–º—ã–∫–∞–Ω–∏—è](@previous)  |  –°—Ç—Ä–∞–Ω–∏—Ü–∞ 8  |  [–í–ø–µ—Ä–µ–¥: –ö–æ–ª–ª–µ–∫—Ü–∏–∏. –°–ª–æ–≤–∞—Ä–∏](@next)
